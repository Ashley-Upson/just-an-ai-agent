// <auto-generated />
using System;
using JustAnAiAgent.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JustAnAiAgent.Data.Migrations
{
    [DbContext(typeof(JustAnAiAgentDbContext))]
    [Migration("20250822021701_GenerateInitialMigration")]
    partial class GenerateInitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JustAnAiAgent.Objects.Entities.AgenticProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Goal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("AgenticProjects");
                });

            modelBuilder.Entity("JustAnAiAgent.Objects.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgenticProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AgenticProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("JustAnAiAgent.Objects.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelThought")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ResponseReceivedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SystemPrompt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPrompt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("JustAnAiAgent.Objects.Entities.ProjectTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("JustAnAiAgent.Objects.Entities.UserConversation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserId", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.ToTable("UserConversations");
                });

            modelBuilder.Entity("JustAnAiAgent.Objects.Entities.AgenticProject", b =>
                {
                    b.HasOne("JustAnAiAgent.Objects.Entities.Message", "Message")
                        .WithMany("AgenticProjects")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("JustAnAiAgent.Objects.Entities.Conversation", b =>
                {
                    b.HasOne("JustAnAiAgent.Objects.Entities.AgenticProject", "AgenticProject")
                        .WithMany()
                        .HasForeignKey("AgenticProjectId");

                    b.HasOne("JustAnAiAgent.Objects.Entities.AgenticProject", null)
                        .WithMany("Conversations")
                        .HasForeignKey("ProjectId");

                    b.Navigation("AgenticProject");
                });

            modelBuilder.Entity("JustAnAiAgent.Objects.Entities.Message", b =>
                {
                    b.HasOne("JustAnAiAgent.Objects.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("JustAnAiAgent.Objects.Entities.ProjectTask", b =>
                {
                    b.HasOne("JustAnAiAgent.Objects.Entities.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId");

                    b.HasOne("JustAnAiAgent.Objects.Entities.AgenticProject", "AgenticProject")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AgenticProject");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("JustAnAiAgent.Objects.Entities.UserConversation", b =>
                {
                    b.HasOne("JustAnAiAgent.Objects.Entities.Conversation", "Conversation")
                        .WithMany("Users")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("JustAnAiAgent.Objects.Entities.AgenticProject", b =>
                {
                    b.Navigation("Conversations");

                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("JustAnAiAgent.Objects.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("JustAnAiAgent.Objects.Entities.Message", b =>
                {
                    b.Navigation("AgenticProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
